{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs32\lang9 LINUX FUNDAMENTALS PART 1\par

\pard\sa200\sl276\slmult1\b0\fs22\par
We'll be covering some of the history behind Linux and then eventually starting your journey of being a Linux-wizard! This room will have you:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs20 Running your very first commands in an interactive Linux machine in your browser\par
{\pntext\f2\'B7\tab}Teaching you some essential commands used to interact with the file system\par
{\pntext\f2\'B7\tab}Demonstrate how you can search for files and introduce shell operators\b\par

\pard\sa200\sl276\slmult1\b0\par
\b\fs24 Flavours of Linux\b0\fs20\par
The name "Linux" is actually an umbrella term for multiple OS's that are based on UNIX (another operating system). Thanks to Linux being open-source, variants of Linux come in all shapes and sizes - suited best for what the system is being used for.\par
For example, Ubuntu & Debian are some of the more commonplace distributions of Linux because it is so extensible. I.e. you can run Ubuntu as a server (such as websites & web applications) or as a fully-fledged desktop. \par
\ul For this series, we're going to be using Ubuntu.\ulnone\par
Note: Ubuntu Server can run on systems with only 512MB of RAM!\par
\par
\b RUNNING YOUR FIRST FEW COMMANDS:\par
\par
\b0 As we previously discussed, a large selling point of using OSs such as Ubuntu is how lightweight they can be. \par
This, of course, doesn't come without its disadvantages, where for example, often there is no GUI (Graphical User Interface) or what is also known as a desktop environment that we can use to interact with the machine (unless it has been installed). \par
A large part of interacting with these systems is using the "Terminal".\par
The "Terminal" is purely text-based and is intimidating at first. However, if we break down some of the commands, after some time, you quickly become familiar with using the terminal!\par
\ul Command\ulnone\tab\ul Description\ulnone\par
echo\tab              Output any text that we provide\par
whoami\tab              Find out what user we're currently logged in as!\par
\b\par
echo\par
NOTE : WHEN YOU USE ECHO, IF YOU WANT TO DISPLAY A SINGLE WORD THEN YOU CAN JUST TYPE THE WORD AFTER THE COMMAND ECHO.\par
\b0 For ex: % echo Ziyan\par
Output will be \par
Ziyan\par
\b BUT IF YOU WANT TO DISPLAY TWO WORDS WITH ONE OR MORE SPACE THEN YOU ADD THEM INSIDE QUOTE UNQUOTE.\par
\b0 For ex: % echo "Ziyan Shaikh!"\line\par
Output will be\par
Ziyan Shaikh\par
\par
\b whoami can be used to find the username we are logged in as\par

\pard\sa200\sl276\slmult1\b0\fs22\par
\b Interacting With the Filesystem\par
\b0 As I previously stated, being able to navigate the machine that you are logged into without relying on a desktop environment is pretty important. After all, what's the point of logging in if we can't go anywhere?\par
\par
\ul Command\ulnone\tab\ul Full Name\par
\ulnone ls\tab\tab listing\par
cd\tab\tab change directory\par
cat\tab\tab concatenate\par
pwd\tab\tab print working directory\par
\par
\b SEARCHING FOR FILES:\b0\par
As you interact with OSs such as Ubuntu over time, essential commands like those we've already covered will start to become muscle-memory.\par
One fantastic way to show just how efficient you can be with systems like this is using a set of commands to quickly search for files across the entire system that our user has access to. \par
No need to consistently use cd and ls to find out what is where. \ul Instead, we can use commands such as find to automate things like this for us!\par
\par
\ulnone\b USING find:\par
\b0 The find command is fantastic in the sense that it can be used both very simply or rather complex depending upon what it is you want to do exactly. However, let's stick to the fundamentals first.\par
Directories can contain even more directories within themselves. \par
It becomes a headache when we're having to look through every single one just to try and look for specific files. \par
We can use \b find \b0 to do just this for us!\par
Let's start simple and assume that we already know the name of the file we're looking for \f1\emdash  but can't remember where it is exactly! In this case, we're looking for "passwords.txt"\par
\f0\lang1033 We will type:\par
% find -name passwords.txt\par
\i The output will be:\par
\i0 ./folder1/passwords.txt\par
\par
"Find" has managed to find the file \f1\emdash  it turns out it is located in folder1/passwords.txt \emdash  sweet. \par
\b But let's say that we don't know the name of the file, or want to search for every file that has an extension such as ".txt". Find let's us do that too!\par
\b0 We can simply use what's known as a wildcard (*) to search for anything that has .txt at the end. \par
In our case, we want to find every .txt file that's in our current directory. \par
We will construct a command such as \b find -name *.txt . \b0\par
Where "Find" has been able to find every .txt file and has then given us the location of each one:\par
\b\f0 NOTE: REMEMBER THAT '*' MEANS "EVERYTHING" IN MACHINE LANGUAGE!\par
\b0 For example :\par
tryhackme@linux1:~$ find -name *.txt\par
\i\par
Output:\i0\par
./folder1/passwords.txt\par
./Documents/todo.txt\par
\par
Find has managed to find:\par
"passwords.txt" located within "folder1"\par
"todo.txt" located within "Documents"\par
That wasn't so tough, huh!\par
\par
\b Using Grep:\par
\par
\b0\lang9 Another great utility that is a great one to learn about is the use of \b grep\b0 . \par
The \b grep \b0 command allows us to search the contents of files for specific values that we are looking for.\par
Take for example, the access log of a web server. In this case, the access.log of a web server has 244 entries.\par
Using "\b wc\b0 " to count the number of entries in \b "access.log"\b0\par
tryhackme@linux1:~$ wc -l access.log\par
244 access.log\par
\par
Using a command like \b cat \b0 isn't going to cut it too well here. \par
Let's say for example if we wanted to search this log file to see the things that a certain user/IP address visited? \par
Looking through 244 entries isn't all that efficient considering we want to find a specific value.\par
We can use \b grep \b0 to search the entire contents of this file for any entries of the value that we are searching for. \par
Going with the example of a web server's access log, we want to see everything that the IP address "81.143.211.90" has visited (note that this is fictional)\par
Using "\b grep\b0 " to find any entries with the IP address of \b "81.143.211.90" \b0 in \b "access.log"\par
\b0 tryhackme@linux1:~$ grep "81.143.211.90" access.log\par
81.143.211.90 - - [25/Mar/2021:11:17 + 0000] "GET / HTTP/1.1" 200 417 "-" "Mozilla/5.0 (Linux; Android 7.0; Moto G(4))"\par
\par
"\b Grep\b0 " has searched through this file and has shown us any entries of what we've provided and that is contained within this log file for the IP.\par
\par
\par
\b AN INTRODUCTION TO SHELL OPERATORS:\par
\par
\b0 Linux operators are a fantastic way to power up your knowledge of working with Linux. \par
There are a few important operators that are worth noting. \par
We'll cover the basics and break them down accordingly to bite-sized chunks.\par
At an overview, I'm going to be showcasing the following operators:\par
\par
\ul Symbol / Operator\ulnone\tab\ul Description\ulnone\par
\b &\b0\tab This operator allows you to run commands in the background of your terminal.\par
\b &&\b0\tab This operator allows you to combine multiple commands together in one line of your terminal.\par
\b >\b0\tab This operator is a redirector - meaning that we can take the output from a command (such as using cat to output a file) and direct it elsewhere.\par
\b >>\b0\tab This operator does the same function of the > operator but appends the output rather than replacing (meaning nothing is overwritten).\par
\par
Let's cover these in a bit more detail.\par
\par
\b Operator "&"\b0\par
\par
This operator allows us to execute commands in the background. \par
For example, let's say we want to copy a large file. \par
This will obviously take quite a long time and will leave us unable to do anything else until the file successfully copies.\par
The \b "&" \b0 shell operator allows us to execute a command and have it run in the background (such as this file copy) allowing us to do other things!\par
\par
\b Operator "&&"\b0\par
\par
This shell operator is a bit misleading in the sense of how familiar is to its partner \b "&". \b0\par
Unlike the \b "&" \b0 operator, we can use \b "&&" \b0 to make a list of commands to run for example: \par
command1 \b && \b0 command2. \par
\ul However, it's worth noting that command2 will only run if command1 was successful.\par
\ulnone\par
\par
\b Operator ">"\par
\b0\par
This operator is what's known as an output redirector. \par
What this essentially means is that we take the output from a command we run and send that output to somewhere else.\par
A great example of this is redirecting the output of the \b echo \b0 command that we learned in Task 4. \par
Of course, running something such as \b echo howdy \b0 will return "\b howdy\b0 " back to our terminal \f1\emdash  that isn't super useful. \par
What we can do instead, is \b redirect "howdy" to something such as a new file!\b0\par
\par
Let's say we wanted to create a file named "welcome" with the message "hey". \par
We can run \b echo hey > welcome \b0 where we want the file created with the contents "\b hey\b0 " like so:\par
\ul\i Using the > Operator\f0\lang1033 :\ulnone\par
\i0\f1\lang9\par
tryhackme@linux1:~$ echo hey > welcome\par
\par
Using cat to output the "welcome" file\par
\par
tryhackme@linux1:~$ cat welcome\par
hey\par
\par
\b Note: If the file i.e. "welcome" already exists, the contents will be overwritten!\par
\par
\f0 Operator ">>"\par
\par
\b0 This operator is also an output redirector like in the previous operator \b (>) \b0 we discussed. \par
However, what makes this operator different is that rather than overwriting any contents within a file, for example, it instead just puts the output at the end.\par
Following on with our previous example where we have the file "welcome" that has the contents of "hey". If were to use echo to add "hello" to the file using the > operator, the file will now only have "hello" and not "hey".\par
The \b >> \b0 operator allows to append the output to the bottom of the file \f1\emdash  rather than replacing the contents like so:\par
\par
\ul\i Using the >> Operator\par
\par
\ulnone\i0 tryhackme@linux1:~$ echo hello >> welcome\par
\par
Using cat to output the "welcome" file\par
\par
tryhackme@linux1:~$ cat welcome\par
hey\par
hello\ul\b\f0\par
\par
\par
To quickly recap, we've covered the following:\par
\par
Understanding why Linux is so commonplace today\par
Interacting with your first-ever Linux machine!\par
Ran some of the most fundamental commands\par
Had an introduction to navigating around the filesystem & how we can use commands like find and grep to make finding data even more efficient!\par
 Power up your commands by learning about some of the important shell operators.\b0\i\par
}
 